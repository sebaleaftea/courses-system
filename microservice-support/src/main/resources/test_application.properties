# filepath: microservice-support/src/main/resources/test_application.properties
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driver-class-name=org.h2.Driver
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect

package com.microservice_support.service;

import com.microservice_support.client.StudentClient;
import com.microservice_support.dto.StudentDTO;
import com.microservice_support.http.response.StudentBySupportResponse;
import com.microservice_support.model.Support;
import com.microservice_support.repository.ISupportRepository;
import net.datafaker.Faker;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

class SupportServicelmplTest {

    @InjectMocks
    private SupportServicelmpl supportService;

    @Mock
    private ISupportRepository supportRepository;

    @Mock
    private StudentClient studentClient;

    private Faker faker;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        faker = new Faker();
    }

    @Test
    void testFindAll() {
        Support support1 = Support.builder()
                .id(1L)
                .ticket(faker.code().isbn10())
                .status("Pending")
                .build();

        Support support2 = Support.builder()
                .id(2L)
                .ticket(faker.code().isbn10())
                .status("Resolved")
                .build();

        when(supportRepository.findAll()).thenReturn(Arrays.asList(support1, support2));

        List<Support> result = supportService.findAll();

        assertEquals(2, result.size());
        verify(supportRepository, times(1)).findAll();
    }

    @Test
    void testFindById() {
        Support support = Support.builder()
                .id(1L)
                .ticket(faker.code().isbn10())
                .status("Pending")
                .build();

        when(supportRepository.findById(1L)).thenReturn(Optional.of(support));

        Support result = supportService.findById(1L);

        assertEquals("Pending", result.getStatus());
        verify(supportRepository, times(1)).findById(1L);
    }

    @Test
    void testSave() {
        Support support = Support.builder()
                .id(1L)
                .ticket(faker.code().isbn10())
                .status("Pending")
                .build();

        supportService.save(support);

        verify(supportRepository, times(1)).save(support);
    }

    @Test
    void testFindStudentByIdSupport() {
        Support support = Support.builder()
                .id(1L)
                .ticket(faker.code().isbn10())
                .status("Pending")
                .build();

        StudentDTO student1 = StudentDTO.builder()
                .id(1L)
                .name(faker.name().fullName())
                .build();

        StudentDTO student2 = StudentDTO.builder()
                .id(2L)
                .name(faker.name().fullName())
                .build();

        when(supportRepository.findById(1L)).thenReturn(Optional.of(support));
        when(studentClient.findAllStudentBySupport(1L)).thenReturn(Arrays.asList(student1, student2));

        StudentBySupportResponse result = supportService.findStudentByIdSupport(1L);

        assertEquals(2, result.getStudentDTOList().size());
        assertEquals("Pending", result.getStatus());
        verify(supportRepository, times(1)).findById(1L);
        verify(studentClient, times(1)).findAllStudentBySupport(1L);
    }
}